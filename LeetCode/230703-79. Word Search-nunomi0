class Solution {
public:
    int visited[20][20];
    int ans=false;

    int dx[4]={0,1,0,-1};
    int dy[4]={1,0,-1,0};

    void dfs(vector<vector<char>>& board, string word, int x, int y, int idx){

        if (idx==word.length()-1) {
            ans=true;
            return;
        }
        
        for (int i = 0; i<4; i++){
            int nx=x+dx[i];
            int ny=y+dy[i];
            if (0<=nx && nx<board.size() && 0<=ny && ny<board[0].size()){
                if (board[nx][ny]!=word[idx+1] || visited[nx][ny]) continue;

                visited[nx][ny]=1;
                dfs(board,word,nx,ny,idx+1);
                visited[nx][ny]=0;
            }
        }
    }

    bool exist(vector<vector<char>>& board, string word) {
        for (int i = 0; i<board.size(); i++){
            for (int j = 0; j<board[0].size(); j++){
                memset(visited,0,sizeof(visited));
                visited[i][j]=1;
                if (board[i][j]==word[0]) dfs(board,word,i,j,0);
            }
        }
        return ans;
    }
};
